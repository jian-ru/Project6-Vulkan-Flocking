#version 450

#extension GL_ARB_separate_shader_objects : enable

#extension GL_ARB_shading_language_420pack : enable

struct Particle
{
	vec2 pos;
	vec2 vel;
};

// LOOK: These bindings correspond to the DescriptorSetLayouts and
// the DescriptorSets from prepareCompute()!

// Binding 0 : Particle storage buffer (read)
layout(std140, binding = 0) buffer ParticlesA
{
   Particle particlesA[ ];
};

// Binding 1 : Particle storage buffer (write)
layout(std140, binding = 1) buffer ParticlesB
{
   Particle particlesB[ ];
};

layout (local_size_x = 256, local_size_y = 1) in;

// LOOK: rule weights and distances, as well as particle count, based off uniforms.
// The deltaT here has to be updated every frame to account for changes in
// frame rate.
layout (binding = 2) uniform UBO
{
	float deltaT;
	float rule1Distance;
	float rule2Distance;
	float rule3Distance;
	float rule1Scale;
	float rule2Scale;
	float rule3Scale;
	int particleCount;
} ubo;

void main()
{
	// LOOK: This is very similar to a CUDA kernel.
	// Right now, the compute shader only advects the particles with their
	// velocity and handles wrap-around.
	// TODO: implement flocking behavior.

    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= ubo.particleCount)
		return;

    // Read position and velocity
	vec2 vPos = particlesA[index].pos.xy;
    vec2 vVel = particlesA[index].vel.xy;

	// Flocking rules
	int rule1Count = 0;
	vec2 center = vec2(0);
	vec2 separationVel = vec2(0);
	int rule3Count = 0;
	vec2 alignmentVel = vec2(0);
	
	for (int i = 0; i < ubo.particleCount; ++i)
	{
		if (i == index) continue;
		
		vec2 nPos = particlesA[i].pos;
		vec2 nVel = particlesA[i].vel;
		
		float dist = distance(nPos, vPos);
		
		if (dist < ubo.rule1Distance)
		{
			center += nPos;
			++rule1Count;
		}
		
		if (dist < ubo.rule2Distance)
		{
			vec2 repel = vPos - nPos;
			separationVel += normalize(repel) * (ubo.rule2Distance - length(repel));
		}
		
		if (dist < ubo.rule3Distance)
		{
			alignmentVel += nVel;
			++rule3Count;
		}
	}
	
	if (rule1Count > 0)
	{
		center /= float(rule1Count);
		vVel += (center - vPos) * ubo.rule1Scale;
	}
	
	vVel += separationVel * ubo.rule2Scale;
	
	if (rule3Count > 0)
	{
		alignmentVel /= float(rule3Count);
		vVel += alignmentVel * ubo.rule3Scale;
	}
	
	// clamp velocity for a more pleasing simulation.
	vVel = normalize(vVel) * clamp(length(vVel), 0.0, 0.1);

	// kinematic update
	vPos += vVel * ubo.deltaT;

    // Wrap around boundary
	if (vPos.x < -1.0) vPos.x = 1.0;
	if (vPos.x > 1.0) vPos.x = -1.0;
	if (vPos.y < -1.0) vPos.y = 1.0;
	if (vPos.y > 1.0) vPos.y = -1.0;

    particlesB[index].pos.xy = vPos;

    // Write back
    particlesB[index].vel.xy = vVel;
}
